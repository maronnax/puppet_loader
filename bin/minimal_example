#!/usr/bin/env python3

import shutil
import subprocess
import sys
import numpy as np
import json
import copy
import time
import os
import socket
from pathlib import Path

from PySide6.QtCore import Qt
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QFileDialog
)
from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from matplotlib.widgets import RectangleSelector
import pygame

PROGRAM_NAME="stitch_made_himself_pretty_alt"
PROGRAM_AUDIO="/Users/naddy/Source/Puppet/puppetnet-loader/inputs/stitch_made_himself_pretty/stitch_made_himself_pretty.mp3"
PROGRAM_FILE="/Users/naddy/Source/Puppet/puppetnet-loader/inputs/stitch_made_himself_pretty/stitch_made_himself_pretty.json"

PROGRAM_FILE_2 = (Path(PROGRAM_FILE).parent.parent / PROGRAM_NAME) / (PROGRAM_NAME + ".json")
PROGRAM_AUDIO_2 = (Path(PROGRAM_FILE).parent.parent / PROGRAM_NAME) / (PROGRAM_NAME + Path(PROGRAM_AUDIO).suffix)
PROGRAM_DIR_2 = Path(PROGRAM_FILE).parent.parent.parent / "outputs"/ "programs" / PROGRAM_NAME

assert PROGRAM_NAME not in PROGRAM_AUDIO, "You're probably using the wrong program name!"

def play_on_puppet(frames, values, fps):
    pygame.mixer.init()
    pygame.mixer.music.load(PROGRAM_AUDIO)

    host = os.environ.get("PUPPETNET_IP", '192.168.4.1')
    port = 12345

    udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_sock.bind(('', port))

    sec_per_frame = 1 / fps
    next_frame = time.time()

    packet = {'dest': 'PUPPET_01', '_type': 'cmd', 'cmd': {'name': 'servo_0', 'state': None}}

    pygame.mixer.music.play()
    for pt in values:
        while True:
            if ((now := time.time()) < next_frame):
                time.sleep(next_frame - now + .0001)
                continue
            packet = {'dest': 'PUPPET_01', '_type': 'cmd', 'cmd': {'name': 'servo_0', 'state': pt}}
            command = json.dumps(packet)
            udp_sock.sendto(command.encode(), (host, port))
            next_frame = time.time() + sec_per_frame
            break
    return

def unpacker(f):
    def alt_f(self, **kwds):
        d = f(self, **kwds)
        return tuple(d[k] for k in kwds)
    return alt_f

class HistoryManager:
    def __init__(self):
        self.history_ptr = -1
        self.history_states = []

    def record_history(self, **kwds):
        # Trim future states if we're in the middle
        if self.history_ptr < len(self.history_states) - 1:
            self.history_states = self.history_states[:self.history_ptr + 1]

        # Append a deepcopy of the current state
        self.history_states.append(copy.deepcopy(kwds))
        self.history_ptr += 1

    @unpacker
    def undo(self, **kwds):
        if self.history_ptr <= 0:
            return kwds

        self.history_ptr -= 1
        past_state = self.history_states[self.history_ptr]
        return {k: past_state.get(k, kwds[k]) for k in kwds}

    @unpacker
    def redo(self, **kwds):
        if self.history_ptr >= len(self.history_states) - 1:
            return kwds  # Nothing to redo

        self.history_ptr += 1
        future_state = self.history_states[self.history_ptr]
        return {k: future_state.get(k, kwds[k]) for k in kwds}


class PlottedCurve:
    def __init__(self, x=None, y=None):
        self._x = np.array(x) if x is not None else np.array([])
        self._y = np.array(y) if y is not None else np.array([])

    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, new_x):
        self._x = np.array(new_x)

    @property
    def y(self):
        return self._y

    @y.setter
    def y(self, new_y):
        self._y = np.array(new_y)

    def get_data(self):
        return self._x, self._y

    def set_data(self, x, y):
        self._x = np.array(x)
        self._y = np.array(y)

    def __len__(self):
        return len(self._x)


class MplGraphCanvas(FigureCanvas):
    def __init__(self, parent=None):

        self.fps = 24
        self.mode = "click"
        self.shift_down = False
        self.ctrl_down = False
        self.meta_down = False
        self.alt_down = False

        self.undo_manager = HistoryManager()


        self.fig = Figure()
        super().__init__(self.fig)
        self.ax = self.fig.add_subplot(111)

        self.ax.axhline(8000, color='lightgrey', linewidth=1, linestyle='--', zorder=0)
        self.ax.axhline(5000, color='lightgrey', linewidth=1, linestyle='--', zorder=0)

        self.curve = PlottedCurve(np.linspace(0, 10, 100), np.sin(np.linspace(0, 10, 100)))
        self.line, = self.ax.plot(self.curve.x, self.curve.y, color='dimgray', linestyle='-')

        self.last_drag_y = None
        self.setParent(parent)

        self.selected_indices = []
        self.last_selected_indices = []

        self.selector = RectangleSelector(
            self.ax,
            onselect=self.on_select,
            useblit=True,
            button=[1],
            minspanx=5, minspany=5,
            spancoords='pixels'
        )
        self.selector.set_active(False)

        self.control_scatter = self.ax.scatter([], [], color='red', zorder=5)
        self.set_draggable_points()

        self.dragging = None

        self.mpl_connect("button_press_event", self.on_click)
        self.mpl_connect("motion_notify_event", self.on_drag)
        self.mpl_connect("button_release_event", self.on_release)

        return

    def record_history(self):
        return self.undo_manager.record_history(
            curve=self.curve,
            selected=self.selected_indices
        )

    def undo(self):
        (self.curve, self.selected_indices) = (
            self.undo_manager.undo(curve=self.curve, selected=self.selected_indices)
        )
        return None

    def redo(self):
        (self.curve, self.selected_indices) = (
            self.undo_manager.redo(curve=self.curve, selected=self.selected_indices)
        )
        return


    def insert_point_at_start(self):
        # Get current curve data
        self.record_history()

        xx = [0] + [(n+1) for n in self.curve.x]
        yy = [self.curve.y[0]] + self.curve.y.tolist()

        self.curve.set_data(xx, yy)
        self.selected_indices = [(n+1) for n in self.selected_indices]

        self.highlight_selected()

        self.update_curve()
        self.draw_idle()
        self.setFocus()
        self.update_view()

        return


    def delete_point_at_start(self):
        # Get current curve data
        self.record_history()

        xx = [(n-1) for n in self.curve.x[1:]]
        yy = self.curve.y.tolist()[1:]

        self.curve.set_data(xx, yy)
        self.selected_indices = [(n-1) for n in self.selected_indices]

        self.highlight_selected()

        self.update_curve()
        self.draw_idle()
        self.setFocus()
        self.update_view()

        return






    def update_view(self):
        self.ax.relim()
        self.ax.autoscale_view(scalex=True, scaley=False)
        self.ax.set_ylim(4000, 8300)
        return


    def key_press_event(self, event):
        if event.key() == Qt.Key_Shift:
            #print("Setting shift_down=True")
            self.shift_down = True
        if event.key() == Qt.Key_Control:
            #print("Setting control_down=True")
            self.control_down = True
        if event.key() == Qt.Key_Meta:
            #print("Setting meta_down=True")
            self.meta_down = True
        if event.key() == Qt.Key_Alt:
            #print("Setting alt_down=True")
            self.alt_down = True

        text = event.text().lower()
        print(text)

        if text == 's' and self.mode != "select":
            self.mode = "select"
            self.selector.set_active(True)
        elif text == 'q':
            self.undo()
            self.update_curve()
            self.draw_idle()
            self.setFocus()
            self.update_view()
        elif text == 'e':
            self.redo()
            self.update_curve()
            self.draw_idle()
            self.setFocus()
            self.update_view()
        elif text == 'x':
            if not self.selected_indices and self.last_selected_indices:
                self.selected_indices = self.last_selected_indices
            else:
                self.last_selected_indices = self.selected_indices
                self.selected_indices = []
            self.highlight_selected()
        elif text == 'i':
            if not self.shift_down:
                self.insert_point_at_start()
            else:
                self.delete_point_at_start()
        elif text == '`':
            import IPython as ip, emacsipython as es; ip.embed(config=es.make_ipy_conf()) ## NJA-IPYTHON
        elif text == '+':
            # Double Resolution
            xx, yy = double_resolution(self.curve.x, self.curve.y)
            self.record_history()
            self.fps *= 2
            self.curve.set_data(xx, yy)
            self.selected_indices = []
            self.highlight_selected()

            self.update_curve()
            self.draw_idle()
            self.setFocus()
            self.update_view()


        elif text == 'p':
            xx = self.curve.x.tolist()
            yy = self.curve.y.tolist()

            if not self.shift_down:
                xx = [xx[ndx] for ndx in self.selected_indices]
                yy = [yy[ndx] for ndx in self.selected_indices]

            play_on_puppet(xx, yy, self.fps)
        return

    def key_release_event(self, event):
        if event.key() == Qt.Key_Shift:
            #print("Setting shift_down=False")
            self.shift_down = False
        if event.key() == Qt.Key_Control:
            #print("Setting control_down=False")
            self.control_down = False
        if event.key() == Qt.Key_Meta:
            #print("Setting meta_down=False")
            self.meta_down = False
        if event.key() == Qt.Key_Alt:
            #print("Setting alt_down=False")
            self.alt_down = False

        text = event.text().lower()
        if text == 's' and self.mode == "select":
            self.mode = "click"
            self.selector.set_active(False)
        return


    def update_curve(self):
        self.line.set_data(self.curve.x, self.curve.y)
        self.ax.relim()
        self.ax.autoscale_view(scalex=True, scaley=False)
        self.ax.set_ylim(4000, 8000)
        self.update_control_display()
        self.draw_idle()


    def set_draggable_points(self):
        if hasattr(self, 'control_scatter'):
            self.control_scatter.remove()
        self.control_scatter = self.ax.scatter(self.curve.x, self.curve.y, color='black', marker='x', zorder=5)
        self.draw_idle()
        return


    def on_select(self, eclick, erelease):
        if self.mode != "select":
            return

        x0, x1 = sorted([eclick.xdata, erelease.xdata])
        y0, y1 = sorted([eclick.ydata, erelease.ydata])


        if self.shift_down:
            for i in range(len(self.curve.x)):
                x, y = self.curve.x[i], self.curve.y[i]
                if x0 <= x <= x1 and y0 <= y <= y1:
                    if i in self.selected_indices:
                        self.selected_indices.remove(i)
                    else:
                        self.selected_indices.append(i)
        else:
            self.selected_indices = []
            for i in range(len(self.curve.x)):
                x, y = self.curve.x[i], self.curve.y[i]
                if x0 <= x <= x1 and y0 <= y <= y1:
                    self.selected_indices.append(i)

        self.highlight_selected()
        return


    def highlight_selected(self):
        if not self.selected_indices:
            self.control_scatter.set_facecolors('black')
            self.draw_idle()
            return

        facecolors = ['green' if i in self.selected_indices else 'black' for i in range(len(self.curve.x))]
        self.control_scatter.set_facecolors(facecolors)
        self.draw_idle()
        return


    def on_click(self, event):
        if self.mode != "click" or event.inaxes != self.ax:
            return

        x_click = event.xdata
        idx = np.argmin(np.abs(self.curve.x - x_click))
        self.dragging = idx
        self.last_drag_y = event.ydata

        if self.shift_down:
            if idx in self.selected_indices:
                self.selected_indices.remove(idx)
            else:
                self.selected_indices.append(idx)
        else:
            # self.selected_indices = [idx]
            self.undo_pending = True  # record undo once on first drag

        self.highlight_selected()
        self.update_control_display()
        return

    def on_drag(self, event):
        if self.mode != "click" or self.dragging is None or event.inaxes != self.ax:
            return

        if event.ydata is None or self.last_drag_y is None:
            return

        dy = event.ydata - self.last_drag_y
        self.last_drag_y = event.ydata

        # Save current state for undo before applying changes
        if getattr(self, "undo_pending", True):
            self.record_history()
            self.undo_pending = False

        new_ys = self.curve.y.copy()
        if self.dragging in self.selected_indices:
            for i in self.selected_indices:
                new_y = new_ys[i] + dy
                if not (5000 <= new_y <= 8000):
                    return  # abort drag if any point goes out of bounds
                new_ys[i] = new_y
        else:
            new_y = event.ydata
            if not (5000 <= new_y <= 8000):
                return
            new_ys[self.dragging] = new_y

        self.curve.y = new_ys
        self.line.set_ydata(self.curve.y)
        self.update_control_display()
        self.draw_idle()
        return


    def on_release(self, event):
        if self.mode == "click":
            self.dragging = None
            self.last_drag_y = None

    def update_control_display(self):
        x_vals = self.curve.x[:]
        y_vals = self.curve.y[:]
        self.control_scatter.set_offsets(np.column_stack([x_vals, y_vals]))
        self.draw_idle()
        return

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Animation Adjustor")

        self.canvas = MplGraphCanvas(self)
        self.canvas.setFocusPolicy(Qt.StrongFocus)
        self.canvas.setFocus()

        self.canvas.keyPressEvent = self.canvas.key_press_event
        self.canvas.keyReleaseEvent = self.canvas.key_release_event

        self.save_button = QPushButton("Save")
        self.save_button.clicked.connect(self.upload_and_play_program)

        self.load_button = QPushButton("Load")
        self.load_button.clicked.connect(self.load_from_csv)

        layout = QVBoxLayout()
        layout.addWidget(self.canvas)

        self.toggle_button = QPushButton("Switch to Select Mode")
        self.toggle_button.clicked.connect(self.toggle_mode)

        layout.addWidget(self.toggle_button)

        layout.addWidget(self.load_button)
        layout.addWidget(self.save_button)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        self.load_file(PROGRAM_FILE)

    def toggle_mode(self):
        if self.canvas.mode == "click":
            self.canvas.mode = "select"
            self.toggle_button.setText("Switch to Click Mode")
            self.canvas.selector.set_active(True)
        else:
            self.canvas.mode = "click"
            self.toggle_button.setText("Switch to Select Mode")
            self.canvas.selector.set_active(False)


    def upload_and_play_program(self):
        self.save_to_csv()
        subprocess.run(["./bin/compile-animation", PROGRAM_FILE_2, PROGRAM_AUDIO, PROGRAM_DIR_2, "--force", "--frame-rate", str(self.canvas.fps)])
        subprocess.run(["bin/upload-program", PROGRAM_DIR_2])
        subprocess.run(["./bin/dev_cmd", "PUPPET_01", "play", PROGRAM_NAME])
        return




    def save_to_csv(self):
        output = {}
        output["servos"] = json.loads(open(PROGRAM_FILE).read())["servos"]
        servo_name = list(json.loads(open(PROGRAM_FILE).read())["servos"].keys())[0]
        output["history"] = [
            {"frame": frame, "servos": {servo_name: {"triangle": 0.0, "servo": int(val)}}}
            for frame, val in enumerate(self.canvas.curve.y, 1)
        ]

        prog_dir = (Path(PROGRAM_FILE).parent.parent / PROGRAM_NAME)
        prog_dir.mkdir(parents=True, exist_ok=True)

        outf_name = (Path(PROGRAM_FILE).parent.parent / PROGRAM_NAME) / (PROGRAM_NAME + ".json")

        with open(outf_name, 'w') as outf:
            outf.write(json.dumps(output))

        output_audio_f = (Path(PROGRAM_FILE).parent.parent / PROGRAM_NAME) / (PROGRAM_NAME + Path(PROGRAM_AUDIO).suffix)
        shutil.copy2(PROGRAM_AUDIO, output_audio_f)
        return

    def load_file(self, fname):
        data = json.loads(open(fname).read())
        servo_name = list(data["servos"].keys())[0]

        frames = [d['frame'] for d in data["history"]]
        frames = [int(x) - 1 for x in frames]

        values = [d["servos"][servo_name]["servo"] for d in data["history"]]

        self.canvas.curve.x = frames
        self.canvas.curve.y = values
        self.canvas.line.set_data(self.canvas.curve.x, self.canvas.curve.y)
        self.update_view()

        self.canvas.control_indices = []
        self.canvas.update_control_display()
        self.canvas.draw_idle()
        self.canvas.set_draggable_points()
        print(f"Loaded from {fname}")
        return

    def update_view(self):
        self.canvas.update_view()
        return

    def load_from_csv(self):
        self.load_file(PROGRAM_FILE)
        return



def double_resolution(x, y):
    x = np.asarray(x)
    y = np.asarray(y)

    new_x = np.empty(2 * len(x) - 1, dtype=float)
    new_y = np.empty_like(new_x)

    new_x[::2] = x
    new_x[1::2] = (x[:-1] + x[1:]) / 2

    new_y[::2] = y
    new_y[1::2] = (y[:-1] + y[1:]) / 2  # Linear interpolation

    return list(map(int, (2 * new_x).tolist())), list(map(int, new_y.tolist()))


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.resize(1920, 1080)

    screens = app.screens()

    if len(screens) > 1:
        other_screen = screens[0]  # Index 0 is primary, 1 is usually the second screen
        geometry = other_screen.geometry()
        window.move(geometry.topLeft())

    window.show()
    sys.exit(app.exec())
